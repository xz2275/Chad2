plot(tSeries)
tui.1 <- filter(tSeries,filter=rep(1/5,5))
tui.2 <- filter(tSeries,filter=rep(1/25,25))
tui.3 <- filter(tSeries,filter=rep(1/81,81))
lines(tui.1,col="red")
lines(tui.2,col="purple")
lines(tui.3,col="blue")
tui.1 <- filter(as.numeric(tSeries),filter=rep(1/5,5))
lines(tui.1,col="red")
tui.1
plot(tui.1)
plot(as.numeric(tSeries)
plot(as.numeric(tSeries))
plot(as.numeric(tSeries))
plot(as.numeric(tSeries), type="l")
tui.1 <- filter(as.numeric(tSeries),filter=rep(1/5,5))
lines(tui.1,col="red")
tui.2 <- filter(tSeries,filter=rep(1/25,25))
lines(tui.2,col="purple")
tui.3 <- filter(tSeries,filter=rep(1/81,81))
lines(tui.3,col="blue")
plot(tSeries, type="l")
tui.1 <- filter(as.numeric(tSeries),filter=rep(1/5,5))
lines(tui.1,col="red")
lines(tui.2,col="purple")
tui.2 <- filter(tSeries,filter=rep(1/25,25))
lines(tui.2,col="purple")
lines(tui.3,col="blue")
plot(as.numeric(tSeries), type="l")
tui.1 <- filter(tSeries,filter=rep(1/5,5))
tui.2 <- filter(tSeries,filter=rep(1/25,25))
tui.3 <- filter(tSeries,filter=rep(1/81,81))
lines(tui.1,col="red")
lines(tui.2,col="purple")
lines(tui.3,col="blue")
title
plot(tSeries)
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), ylab="Value")
tui.1 <- filter(tSeries,filter=rep(1/5,5))
tui.2 <- filter(tSeries,filter=rep(1/25,25))
tui.3 <- filter(tSeries,filter=rep(1/81,81))
lines(tui.1,col="red")
lines(tui.2,col="purple")
lines(tui.3,col="blue")
t<-seq(1956,1995.2,length=length(beer))
beer<-read.csv("C:/beer.csv",header=T,dec=",",sep=";")#
beer<-ts(beer[,1],start=1956,freq=12)#
plot(stl(log(beer),s.window="periodic"))
beer<-read.csv("C:/beer.csv",header=T,dec=",",sep=";")
beer<-read.csv("beer.csv",header=T,dec=",",sep=";")
beer<-ts(beer[,1],start=1956,freq=12)#
plot(stl(log(beer),s.window="periodic"))
?stl
plot(stl(tSeries))
plot(stl(as.numeric(tSeries)))
log(beer)
t<-seq(1956,1995.2,length=length(beer))
t
beer
index = findText(text, "Range:")
begin = text[index+1]
begin
text[1:50]
end = text[index+3]
end
strsplit(begin, "-")[[1]][2]
byy = strsplit(begin, "-")[[1]][1]
bmm = strsplit(begin, "-")[[1]][2]
bdd = strsplit(begin, "-")[[1]][3]
eyy = strsplit(end, "-")[[1]][1]
emm = strsplit(end, "-")[[1]][2]
edd = strsplit(end, "-")[[1]][3]
byy = as.numeric(strsplit(begin, "-")[[1]][1])
byy
eyy = as.numeric(strsplit(end, "-")[[1]][1])
emm = as.numeric(strsplit(end, "-")[[1]][2])
edd = as.numeric(strsplit(end, "-")[[1]][3])
eyy
byy.bmm.bdd
byy.bmm
byy = as.numeric(strsplit(begin, "-")[[1]][1])
bmm = as.numeric(strsplit(begin, "-")[[1]][2])
bdd = as.numeric(strsplit(begin, "-")[[1]][3])
byy.bmm
bmm
from_date = byy + bmm/10
to_date = eyy + emm/10
from_date
to_date
length(tSeries)
t<-seq(from_date,to_date,length=length(tSeries))
lseries = log(tSeries)
t<-seq(from_date,to_date,length=length(lseries))
t2<-t^2
plot(lseries)
lm(lseries ~ t + t2)
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), ylab="Value")
tui.1 <- filter(tSeries,filter=rep(1/5,5))
tui.2 <- filter(tSeries,filter=rep(1/25,25))
tui.3 <- filter(tSeries,filter=rep(1/81,81))
lines(tui.1,col="red")
lines(tui.2,col="purple")
lines(tui.3,col="blue")
plot(lseries, main="Performing Regression Analysis")
lm(lseries ~ t + t2)
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)
par(mfrow=c(2,1))
?plot
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab=NULL, ylab="Value", xaxt="n")
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
tui.1 <- filter(tSeries,filter=rep(1/5,5))
tui.2 <- filter(tSeries,filter=rep(1/25,25))
tui.3 <- filter(tSeries,filter=rep(1/81,81))
lines(tui.1,col="red")
lines(tui.2,col="purple")
lines(tui.3,col="blue")
index = findText(text, "Range:")
begin = text[index+1]
end = text[index+3]
byy = as.numeric(strsplit(begin, "-")[[1]][1])
bmm = as.numeric(strsplit(begin, "-")[[1]][2])
bdd = as.numeric(strsplit(begin, "-")[[1]][3])
eyy = as.numeric(strsplit(end, "-")[[1]][1])
emm = as.numeric(strsplit(end, "-")[[1]][2])
edd = as.numeric(strsplit(end, "-")[[1]][3])
from_date = byy + bmm/10
to_date = eyy + emm/10
lseries = log(tSeries)
t<-seq(from_date,to_date,length=length(lseries))
t2<-t^2
plot(lseries, main="Performing Regression Analysis")
lm(lseries ~ t + t2)
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)
lseries = tSeries
t<-seq(from_date,to_date,length=length(lseries))
t2<-t^2
plot(lseries, main="Performing Regression Analysis")
lm(lseries ~ t + t2)
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)
par(mfrow=c(2,1))#
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")#
tui.1 <- filter(tSeries,filter=rep(1/5,5))#
tui.2 <- filter(tSeries,filter=rep(1/25,25))#
tui.3 <- filter(tSeries,filter=rep(1/81,81))#
lines(tui.1,col="red")#
lines(tui.2,col="purple")#
lines(tui.3,col="blue")#
#
# -- [ Regression Analysis ] --#
# ==============================#
index = findText(text, "Range:")#
begin = text[index+1]#
end = text[index+3]#
byy = as.numeric(strsplit(begin, "-")[[1]][1])#
bmm = as.numeric(strsplit(begin, "-")[[1]][2])#
bdd = as.numeric(strsplit(begin, "-")[[1]][3])#
eyy = as.numeric(strsplit(end, "-")[[1]][1])#
emm = as.numeric(strsplit(end, "-")[[1]][2])#
edd = as.numeric(strsplit(end, "-")[[1]][3])#
from_date = byy + bmm/10 #
to_date = eyy + emm/10#
#
lseries = tSeries#
t<-seq(from_date,to_date,length=length(lseries))#
t2<-t^2#
plot(lseries, main="Performing Regression Analysis")#
lm(lseries ~ t + t2)#
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)
plot(lseries, ylab="Value", main="Performing Regression Analysis")
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,100,25)), col="lightgray", lty="dotted")
v
length(lseries)
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),25)), col="lightgray", lty="dotted")
plot(lseries, ylab="Value", main="Performing Regression Analysis")
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="lightgray", lty="dotted")
lm(lseries ~ t + t2)
plot(lseries, ylab="Value", main="Performing Regression Analysis")
?abline
abline(v=(seq(0,length(lseries),50)), col="lightgray", lty="dotted")
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="lightgray", lwd=2, lty="dotted")
figure(2)
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="lightgray", lwd=2, lty="dotted")
plot(lseries, ylab="Value", main="Performing Regression Analysis")
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="gray", lwd=2, lty=4)
abline(h=(seq(0,length(lseries),50)), col="gray", lwd=2, lty=4)
abline(h=(seq(0,length(lseries),100)), col="gray", lwd=2, lty=4)
abline(v=(seq(0,length(lseries),50)), col="gray", lwd=2, lty=4)
abline(v=(seq(0,length(lseries),50)), col="gray", lwd=2, lty=4)
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="gray", lwd=2, lty=4)
abline(h=(seq(0,length(lseries),100)), col="gray", lwd=2, lty=4)
abline(h=(seq(0,100,20)), col="gray", lwd=2, lty=4)
abline(h=(seq(0,100,5)), col="gray", lwd=2, lty=4)
abline(h=(seq(0,100,10)), col="gray", lwd=2, lty=4)
plot(lseries, ylab="Value", main="Performing Regression Analysis")
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="gray", lwd=1, lty=4)
abline(h=(seq(0,100,20)), col="gray", lwd=2, lty=4)
plot(lseries, ylab="Value", main="Performing Regression Analysis")
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),50)), col="lightgray", lwd=1, lty=4)
abline(h=(seq(0,100,20)), col="lightgray", lwd=1, lty=4)
lm(lseries ~ t + t2)
plot(lseries, ylab="Value", main="Performing Regression Analysis")
par(mfrow=c(2,1))
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")
abline(v=(seq(0,length(lseries),60)), col="lightgray", lwd=1, lty=4)
abline(h=(seq(0,100,20)), col="lightgray", lwd=1, lty=4)
plot(lseries, ylab="Value", main="Performing Regression Analysis")
png('plot2.png')#
par(mfrow=c(2,1))#
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")#
abline(v=(seq(0,length(lseries),60)), col="lightgray", lwd=1, lty=4)#
abline(h=(seq(0,100,20)), col="lightgray", lwd=1, lty=4)#
tui.1 <- filter(tSeries,filter=rep(1/5,5))#
tui.2 <- filter(tSeries,filter=rep(1/25,25))#
tui.3 <- filter(tSeries,filter=rep(1/81,81))#
lines(tui.1,col="red")#
lines(tui.2,col="purple")#
lines(tui.3,col="blue")#
#
# -- [ Regression Analysis ] --#
# ==============================#
index = findText(text, "Range:")#
begin = text[index+1]#
end = text[index+3]#
byy = as.numeric(strsplit(begin, "-")[[1]][1])#
bmm = as.numeric(strsplit(begin, "-")[[1]][2])#
bdd = as.numeric(strsplit(begin, "-")[[1]][3])#
eyy = as.numeric(strsplit(end, "-")[[1]][1])#
emm = as.numeric(strsplit(end, "-")[[1]][2])#
edd = as.numeric(strsplit(end, "-")[[1]][3])#
from_date = byy + bmm/10 #
to_date = eyy + emm/10#
#
lseries = tSeries#
t<-seq(from_date,to_date,length=length(lseries))#
t2<-t^2#
plot(lseries, ylab="Value", main="Performing Regression Analysis")#
lm(lseries ~ t + t2)#
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)#
dev.off()
acf(lseries)
library(tseries)
library(RColorBrewer)
holdfit = auto.arima(log(consumption), d=1, D=1, approx=FALSE, ic="aicc", trace=TRUE)
holdfit = auto.arima(log(tSeries), d=1, D=1, approx=FALSE, ic="aicc", trace=TRUE)
summary(holdfit)
holdfit = auto.arima(log(tSeries), approx=FALSE, ic="aicc", trace=TRUE)
holdfit = auto.arima(log(tSeries), d = 1, approx=FALSE, ic="aicc", trace=TRUE)
holdfit
tsdiag(holdfit)
horoscope = forecaste(holdfit, h=10)
horoscope = forecast(holdfit, h=10)
plot(horoscope)
to_date
t
to_date
t[:end]
t[end]
t[length(t)]
t[length(t-1)]
t[length(t)-1]
t[length(t)] -  t[length(t)-1]
step = t[length(t)] - t[length(t)-1]
to_date + step*10
plot(horoscope, xlim=c(to_date, to_date + step*10))
plot(horoscope)
tSeries
summary(horoscope)
print(summary(horoscope))
source("chad.R")
source("chad.R")
source("chad.R")
source("chad.R")
rm(list = ls())#
setwd('/Users/Carol/Documents/Android/Chad2/R')#
#
library(forecast)#
library(xts)#
library(tseries)#
library(RColorBrewer)#
#
filename = "IC4WSA.txt"#
#
findText <-function(data, key){#
	# data is a list of words, key is the word you are looking for#
	# return the index of the keyword#
	index = 1#
	while(data[index] != key){#
		index = index + 1#
	}#
	return(index)#
}#
# -- [ Parse the data file ] --#
# =========================#
text = scan(filename, character(0))#
line = readLines(filename, 1)#
title = strsplit(line, "               ")[[1]][2]#
#
index = findText(text, "VALUE")#
value = c()#
for (i in seq((index+2), length(text), 2)){#
	value = append(value, as.numeric(text[i]))#
}#
dates = c()#
for (i in seq((index+1), length(text)-1, 2)){#
	dates = append(dates, as.Date(text[i]))#
}#
data = data.frame(value, row.names=dates)#
tSeries = xts(data, order.by=dates)#
#
paste("DATE PROCESSED...")
png('plot1.png')#
par(mfrow=c(2,2))#
plot(tSeries, main = title, ylab="Value")#
plot(log(tSeries), main = paste("log(", title, ")"), ylab="Value") #
# can do BoxCox transform here#
plot(diff(tSeries), main = paste("diff(", title, ")"), ylab="Value")#
plot(diff(log(tSeries)), main = paste("log(diff(", title,"))"), ylab="Value")#
dev.off()#
#
paste("INITIAL PLOTTING DONE...")#
# follow this book: http://www.statoek.wiso.uni-goettingen.de/veranstaltungen/zeitrei
png('plot2.png')#
par(mfrow=c(2,1))#
plot(as.numeric(tSeries), type="l", main=paste("Linear Filtering Output of ", title), xlab="", ylab="Value", xaxt="n")#
abline(v=(seq(0,length(tSeries),60)), col="lightgray", lwd=1, lty=4)#
abline(h=(seq(0,100,20)), col="lightgray", lwd=1, lty=4)#
tui.1 <- filter(tSeries,filter=rep(1/5,5))#
tui.2 <- filter(tSeries,filter=rep(1/25,25))#
tui.3 <- filter(tSeries,filter=rep(1/81,81))#
lines(tui.1,col="red")#
lines(tui.2,col="purple")#
lines(tui.3,col="blue")
index = findText(text, "Range:")#
begin = text[index+1]#
end = text[index+3]#
byy = as.numeric(strsplit(begin, "-")[[1]][1])#
bmm = as.numeric(strsplit(begin, "-")[[1]][2])#
bdd = as.numeric(strsplit(begin, "-")[[1]][3])#
eyy = as.numeric(strsplit(end, "-")[[1]][1])#
emm = as.numeric(strsplit(end, "-")[[1]][2])#
edd = as.numeric(strsplit(end, "-")[[1]][3])#
from_date = byy + bmm/10 #
to_date = eyy + emm/10#
#
lseries = log(tSeries)#
t<-seq(from_date,to_date,length=length(lseries))#
t2<-t^2#
plot(lseries, ylab="Value", main="Performing Regression Analysis")#
regress = lm(lseries ~ t + t2)#
lines(lm(lseries~t+t2)$fit,col=2,lwd=2)#
dev.off()
holdfit = auto.arima(log(tSeries), d = 1, approx=FALSE, ic="aicc", trace=TRUE)
png('plot3.png')
tsdiag(holdfit)
dev.off()
paste("ARIMA DONE...")
horoscope = forecast(holdfit, h=10)
horoscope = forecast(holdfit)
holdfit = auto.arima(log(as.ts(tSeries)), d = 1, approx=FALSE, ic="aicc", trace=TRUE)
horoscope = forecast(holdfit)
source("chad.R")
cat("Time Series Analysis Output for ", title, "\n")
source("chad.R")
as.str(1)
as.charactor(1)
as.character(1)
a = as.character(1)
a
